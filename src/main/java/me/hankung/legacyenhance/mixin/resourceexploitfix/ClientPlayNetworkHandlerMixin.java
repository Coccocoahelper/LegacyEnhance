package me.hankung.legacyenhance.mixin.resourceexploitfix;

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import me.hankung.legacyenhance.LegacyEnhance;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.network.packet.c2s.play.ResourcePackStatusC2SPacket;
import net.minecraft.network.packet.s2c.play.ResourcePackSendS2CPacket;

@Mixin(ClientPlayNetworkHandler.class)
public class ClientPlayNetworkHandlerMixin {

    @Inject(method = "onResourcePackSend", at = @At("HEAD"), cancellable = true)
    private void resourceExploitFix(ResourcePackSendS2CPacket packetIn, CallbackInfo ci) {
        if (LegacyEnhance.CONFIG.securityResourceExploit.get() && !validateResourcePackUrl((ClientPlayNetworkHandler) (Object) this, packetIn)) {
            ci.cancel();
        }
    }

    private static boolean validateResourcePackUrl(ClientPlayNetworkHandler client, ResourcePackSendS2CPacket packet) {
        try {
            String url = packet.getURL();
            final URI uri = new URI(url);
            final String scheme = uri.getScheme();
            final boolean isLevelProtocol = "level".equals(scheme);

            if (!"http".equals(scheme) && !"https".equals(scheme) && !isLevelProtocol) {
                client.getClientConnection().send(new ResourcePackStatusC2SPacket(packet.getHash(), ResourcePackStatusC2SPacket.Status.FAILED_DOWNLOAD));
                throw new URISyntaxException(url, "Wrong protocol");
            }

            url = URLDecoder.decode(url.substring("level://".length()), StandardCharsets.UTF_8.toString());

            if (isLevelProtocol && (url.contains("..") || !url.endsWith("/resources.zip"))) {
                LegacyEnhance.LOGGER.warn("Malicious server tried to access {}", url);
                if (MinecraftClient.getInstance().player != null) {
                    LegacyEnhance.sendChatMessage("&c&lThe current server has attempted to be malicious but we have stopped them.");
                }

                throw new URISyntaxException(url, "Invalid levelstorage resourcepack path");
            }

            return true;
        } catch (URISyntaxException e) {
            e.printStackTrace();
            return false;
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

        return false;
    }

}
