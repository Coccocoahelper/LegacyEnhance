plugins {
	id 'fabric-loom' version "1.5-SNAPSHOT"
	id 'legacy-looming' version "1.5-SNAPSHOT" // Version must be the same as fabric-loom's
}

version = project.mod_version
group = project.maven_group

repositories {
	maven {
		url "https://moehreag.duckdns.org/maven/releases"
	}
	maven {
		url "https://repo.codemc.io/repository/maven-public/"
	}
	maven {
		url 'https://jitpack.io'
	}
	maven {
        url "https://repo.velocitypowered.com/snapshots/"
    }
}

loom {
	
	// Only needed for versions not available from vanilla launcher by default.
	// customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")

	// Required by 1.7.x
	// runs {
	// 	client {
	// 		programArgs "--userProperties", "{}"
	// 	}
	// }

	mixin {
        defaultRefmapName = "${project.refmap_name}"
    }

	accessWidenerPath.set(file("src/main/resources/legacyenhance.accesswidener"))

}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(legacy.yarn(project.minecraft_version, project.yarn_build))
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modLocalRuntime modCompileOnlyApi(files("libs/legacy-modmenu-1.1.0.jar"))

	modImplementation "io.github.axolotlclient.AxolotlClient-config:AxolotlClientConfig-common:${project.axolotl_config}"
	include "io.github.axolotlclient.AxolotlClient-config:AxolotlClientConfig-common:${project.axolotl_config}"

	modImplementation include("io.github.axolotlclient:AxolotlClient-config:${project.axolotl_config}+${project.minecraft_version}")

	modImplementation include("com.velocitypowered:velocity-native:4.0.0-SNAPSHOT")

	extraLibs "com.logisticscraft:occlusionculling:0.0.7-SNAPSHOT"

	extraLibs "com.github.LlamaLad7:MixinExtras:0.1.1"
    annotationProcessor "com.github.LlamaLad7:MixinExtras:0.1.1"

	// Fabric API provides hooks for events, item registration, and more. As most mods will need this, it's included by default. 
	// If you know for a fact you don't, it's not required and can be safely removed.
	modImplementation "net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}"

	// You can retrieve a specific api module using this notation.
	// modImplementation(legacy.apiModule("legacy-fabric-item-groups-v1", project.fabric_version))

	configurations.implementation.extendsFrom(configurations.extraLibs)

}

base {
	archivesName = project.archives_base_name
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (JavaVersion.current().isJava9Compatible()) it.options.release = 8

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	// withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}" }
	}
	from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

tasks.withType(Jar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}